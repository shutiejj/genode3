source ${genode_dir}/repos/libports/run/qt5_common.inc

set feature(Nic) 1

#
# Build
#

append build_components [qt5_build_components feature]

append build_components {
	server/clipboard server/loader server/tar_rom server/nit_fb app/launchpad test/nitpicker
	lib/mesa/swrast
	lib/vfs/jitterentropy
	app/arora
}

build $build_components

create_boot_directory

#
# Create Qt tar archive
#

create_qt5_fs_tar_archive "arora" "gui"

#
# Generate tar archives with plugin configurations
#
exec tar cf bin/nitpicker_plugin.tar -C [genode_dir]/repos/ports/src/app/arora/demo/nitpicker_plugin config.plugin

#
# Generate config
#

append config {
<config>
	<parent-provides>}
append config [qt5_parent_provides feature]
append config {
	</parent-provides>
	<default caps="100"/>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append config [qt5_start_nodes feature]

append config {

	<start name="clipboard">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="ROM"/>
			<service name="Report"/>
		</provides>
		<config>
			<policy label="arora -> clipboard" domain="default"  />
		</config>
		<route>
			<service name="ROM" label="focus"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="loader">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Loader"/></provides>
		<config>
			<policy label_prefix="arora">
				<parent-rom name="ld.lib.so"/>
				<parent-rom name="init"/>
				<parent-rom name="tar_rom"/>
				<parent-rom name="nit_fb"/>
				<parent-rom name="nitpicker"/>
				<parent-rom name="pointer"/>
				<parent-rom name="launchpad"/>
				<parent-rom name="testnit"/>
			</policy>
		</config>
		<route>
			<service name="Nitpicker"> <child name="wm"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="arora" caps="2000">
		<resource name="RAM" quantum="2G"/>
		<config clipboard="yes">
			<vfs>
				<dir name="dev">
					<log/>
					<jitterentropy name="random"/>
				</dir>
				<tar name="qt5_fs_arora.tar"/>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log"/>
		</config>
		<route>
			<service name="Nitpicker"> <child name="wm"/> </service>
			<service name="Report"> <child name="clipboard"/> </service>
			<service name="ROM" label="clipboard"> <child name="clipboard"/> </service>
			<service name="ROM" label="egl_drv.lib.so"> <parent label="egl_swrast.lib.so" /> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

install_config $config

#
# Boot modules
#

append boot_modules [qt5_boot_modules feature]

append boot_modules {
	clipboard
	loader
	tar_rom
	nit_fb
	launchpad
	testnit
	arora
	ld.lib.so
	libc.lib.so libm.lib.so lwip.lib.so
	zlib.lib.so libpng.lib.so jpeg.lib.so libssl.lib.so libcrypto.lib.so
	freetype.lib.so
	libc_pipe.lib.so
	stdcxx.lib.so
	vfs_jitterentropy.lib.so
	nitpicker_plugin.tar
}

#
# Qt5-specific boot modules
#
append boot_modules {
	egl.lib.so
	egl_swrast.lib.so
	expat.lib.so
	glapi.lib.so
	icu.lib.so
	mesa.lib.so
	pcre16.lib.so
	pthread.lib.so
	qt5_angle.lib.so
	qt5_core.lib.so
	qt5_gui.lib.so
	qt5_jscore.lib.so
	qt5_network.lib.so
	qt5_opengl.lib.so
	qt5_qnitpickerviewwidget.lib.so
	qt5_qpluginwidget.lib.so
	qt5_ui_tools.lib.so
	qt5_webcore.lib.so
	qt5_webkit.lib.so
	qt5_xml.lib.so	
	qt5_printsupport.lib.so
	qt5_scriptclassic.lib.so
	qt5_sql.lib.so
	qt5_webkitwidgets.lib.so
	qt5_widgets.lib.so
	qt5_wtf.lib.so
	qt5_fs_arora.tar
}

build_boot_image $boot_modules


append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user "

run_genode_until forever

