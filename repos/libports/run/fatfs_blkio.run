#
# \brief  Test of FatFS blkio implementation
# \author Emery Hemingway
# \date   2017-07-31
#

if {[have_spec odroid_xu] || [have_spec zynq]} {
	puts "Run script does not support this platform."
	exit 0
}

# use SD on ARM
set use_sd_card_drv [expr [have_spec omap4] || [have_spec arndale] || [have_spec pl180]]

# use AHCI on x86
set use_ahci        [expr [have_spec x86] && ![have_spec linux]]

# use ram_blk on Linux
set use_ram_blk     [have_spec linux]

if {[expr ![have_include "power_on/qemu"] && !$use_ram_blk]} {
	puts "\nPlease setup your native sd or hard drive. Remove this fail stop";
	puts "check when you have prepared your native environment.\n";
	exit 0
}

#
# Build
#
set build_components {
	test/fatfs_blkio
}

lappend_if $use_sd_card_drv build_components drivers/sd_card

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

set depot_pkgs "genodelabs/src/[base_src] genodelabs/src/init"

lappend_if $use_ahci    depot_pkgs genodelabs/src/ahci_drv
lappend_if $use_ram_blk depot_pkgs genodelabs/src/ram_blk

import_from_depot {*}$depot_pkgs

#
# Generate config
#
append config {
<config>
	<parent-provides>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="128"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="test-fatfs_blkio">
		<resource name="RAM" quantum="10M"/>
		<config ld_verbose="true">
			<libc stdout="/log" stderr="/log"/>
			<vfs> <log/> </vfs>
		</config>
	</start>}

append_platform_drv_config

append_if $use_ahci config {
	<start name="ahci_drv">
		<resource name="RAM" quantum="10M" />
		<provides><service name="Block" /></provides>
		<route>
			<any-service> <parent /> <any-child /></any-service>
		</route>
		<config>
			<policy label_prefix="test-fatfs_blkio" device="0"/>
		</config>
	</start>}

append_if $use_sd_card_drv config {
	<start name="sd_card_drv">
		<resource name="RAM" quantum="1M" />
		<provides><service name="Block"/></provides>
	</start>
}

append_if $use_ram_blk config {
	<start name="ram_blk">
		<resource name="RAM" quantum="4M" />
		<provides><service name="Block"/></provides>
		<config size="1M" block_size="512"/>
	</start>}

append config {
</config>
}

install_config $config

#
# Boot modules
#

set disk_image "bin/test.hda"
set cmd "dd if=/dev/zero of=$disk_image bs=512 count=4096"
puts "creating disk image: $cmd"
catch { exec sh -c $cmd }

# generic modules
set boot_modules {
	libc.lib.so
	libm.lib.so
	test-fatfs_blkio
}

lappend_if $use_sd_card_drv  boot_modules sd_card_drv
lappend_if $use_ram_blk      boot_modules test.hda

append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Qemu
#
append qemu_args "  -nographic "
append_if $use_ahci        qemu_args " -drive id=disk,file=$disk_image,format=raw,if=none -device ahci,id=ahci -device ide-drive,drive=disk,bus=ahci.0 -boot d"
append_if $use_sd_card_drv qemu_args " -drive file=$disk_image,format=raw,if=sd,cache=writeback "

run_genode_until {.*child "test-fatfs_blkio" exited with exit value 0.*} 60

exec rm -f $disk_image
