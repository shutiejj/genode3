proc binary_name_ld_lib_so { } { return "ld-sel4.lib.so" }
proc binary_name_core_o    { } { return "core-sel4.o" }
proc binary_name_timer     { } {
	if {[have_spec wand_quad]} { return "wand_quad_timer_drv" }
	if {[have_spec x86]}       { return "pit_timer_drv" }
	puts "unknown platform - no timer driver"
	exit -1
}

proc kernel_files          { } { return sel4 }


proc run_boot_string   { } { return "\n\rBooting all finished, dropped to user space" }
proc core_link_address { } { return "0x02000000" }

proc sel4_elfloader_dir { } { return "[pwd]/var/libcache/kernel-sel4/elfloader" }

##
# Populate boot directory with binaries on hw
#
proc run_boot_dir {binaries} {

	#
	# Build kernel and dynamic linker on demand, if not yet present in
	# '[run_dir]/genode/'
	#
	set kernel_arg ""
	set ld_arg     ""
	if {![file exists [run_dir]/genode/sel4]}      { set kernel_arg "kernel/sel4" }
	if {![file exists [run_dir]/genode/ld.lib.so]} { set ld_arg     "lib/ld/sel4" }
	set targets "$kernel_arg $ld_arg"

	if {[llength $targets]} { build $targets }

	if {$kernel_arg != ""} {
		file copy -force [pwd]/bin/sel4 [run_dir]/genode/sel4
	}

	build_core_image $binaries

	#
	# Move kernel files to distinct location within the boot directory so that
	# we can remove [run_dir]/genode after the core image has been built.
	#
	file copy -force [run_dir]/genode/sel4 [run_dir]/sel4
	exec rm -r [run_dir]/genode

	if {[have_include "image/iso"] || [have_include "image/disk"]} {
		#
		# Install isolinux/GRUB files and bender
		#
		install_iso_bootloader_to_run_dir

		#
		# Generate GRUB config file
		#
		set fh [open "[run_dir]/boot/grub/menu.lst" "WRONLY CREAT TRUNC"]
		puts $fh "timeout 0"
		puts $fh "default 0"
		puts $fh "\ntitle Genode on seL4"
		puts $fh " kernel /boot/bender phys_max=256M"
		puts $fh " module /sel4 disable_iommu"
		puts $fh " module /image.elf"

		close $fh
	}

	#
	# Use seL4 elfloader tool to generate bootable image on ARM
	#
	if {[have_spec arm]} {
		if {![have_spec imx6]} {
			puts "abort - unknown ARM board"
			exit 1
		}
		# keep Genode image.elf as genode.elf
		exec mv [run_dir]/image.elf [run_dir]/genode.elf

		# call seL4 elfloader tool to generate image.elf bootable by uboot with 'bootelf' command
		set ::env(PLAT) imx6
		set ::env(TOOLPREFIX) [cross_dev_prefix]
		exec [sel4_elfloader_dir]/gen_boot_image.sh [run_dir]/sel4 [run_dir]/genode.elf [run_dir]/image.elf
	}

	if {[have_spec x86] && [have_include image/uefi]} {
		exec mkdir -p [run_dir]/efi/boot
		exec cp [genode_dir]/tool/boot/grub2_32.efi [run_dir]/efi/boot/bootia32.efi
		exec cp [genode_dir]/tool/boot/grub2_64.efi [run_dir]/efi/boot/bootx64.efi
		exec mkdir -p [run_dir]/boot/grub
		exec cp [genode_dir]/tool/boot/bender [run_dir]/boot/bender

		#
		# Generate GRUB2 config file
		#
		set fh [open "[run_dir]/boot/grub/grub.cfg" "WRONLY CREAT TRUNC"]
		puts $fh "set timeout=0"
		puts $fh "menuentry 'Genode on seL4' {"
		puts $fh " multiboot2 /boot/bender phys_max=256M serial_fallback"
		puts $fh " module2 /sel4 sel4 disable_iommu"
		puts $fh " module2 /image.elf image.elf"
		puts $fh "}"
		close $fh
	}

	run_image [run_dir]/image.elf

	# set symbolic link to image.elf file in TFTP directory for PXE boot
	if {[have_spec arm] && [have_include "load/tftp"]} {
		exec ln -sf [pwd]/[run_dir]/image.elf [load_tftp_base_dir][load_tftp_offset_dir]

		if {[have_include "image/uboot"]} {
			exec ln -sf [pwd]/[run_dir]/uImage [load_tftp_base_dir][load_tftp_offset_dir]
		}
	}

	if {[have_spec x86] && [have_include "load/tftp"]} {
		#
		# Install PXE bootloader pulsar
		#
		install_pxe_bootloader_to_run_dir

		#
		# Generate pulsar config file
		#
		set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
		puts $fh " exec /boot/bender phys_max=256M"
		puts $fh " load /sel4 disable_iommu"
		puts $fh " load /image.elf"
		close $fh

		generate_tftp_config
	}

	if {[have_spec x86] && [have_include "load/ipxe"]} {
		create_ipxe_iso_config
		update_ipxe_boot_dir
		create_symlink_for_iso
	}
}


##
# Base source archive within depot
#
proc base_src { } { return base-sel4 }

