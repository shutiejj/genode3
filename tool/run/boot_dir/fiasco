proc binary_name_ld_lib_so { } { return "ld-fiasco.lib.so" }
proc binary_name_core_o    { } { return "core-fiasco.o"    }
proc binary_name_timer     { } { return "fiasco_timer_drv" }

proc kernel_files { } { return { fiasco sigma0-fiasco bootstrap-fiasco } }

proc fiasco_serial_esc_arg { } { return "-serial_esc " }
proc run_boot_string       { } { return "\nL4 Bootstrapper" }
proc core_link_address     { } { return "0x01000000" }


##
# Populate boot directory with binaries on fiasco
#
proc run_boot_dir {binaries} {

	#
	# Build kernel and dynamic linker on demand, if not yet present in
	# '[run_dir]/genode/'
	#
	set kernel_arg ""
	set ld_arg     ""
	if {![file exists [run_dir]/genode/fiasco]}    { set kernel_arg "kernel/fiasco" }
	if {![file exists [run_dir]/genode/ld.lib.so]} { set ld_arg     "lib/ld/fiasco" }
	set targets "$kernel_arg $ld_arg"

	if {[llength $targets]} { build $targets }

	if {$kernel_arg != ""} {
		file copy -force [pwd]/bin/fiasco           [run_dir]/genode/fiasco
		file copy -force [pwd]/bin/sigma0-fiasco    [run_dir]/genode/sigma0-fiasco
		file copy -force [pwd]/bin/bootstrap-fiasco [run_dir]/genode/bootstrap-fiasco
	}

	build_core_image $binaries

	#
	# Move kernel files to distinct location within the boot directory so that
	# we can remove [run_dir]/genode after the core image has been built.
	#
	file copy -force [run_dir]/genode/fiasco           [run_dir]/kernel
	file copy -force [run_dir]/genode/sigma0-fiasco    [run_dir]/sigma0
	file copy -force [run_dir]/genode/bootstrap-fiasco [run_dir]/bootstrap
	exec rm -r [run_dir]/genode

	if {[have_include "image/iso"] || [have_include "image/disk"]} {

		#
		# Install isolinux/GRUB files and bender
		#
		install_iso_bootloader_to_run_dir

		#
		# Generate GRUB config file
		#
		# The core binary is part of the 'binaries' list but it must
		# appear right after 'sigma0' as boot module. Hence the special case.
		#
		set fh [open "[run_dir]/boot/grub/menu.lst" "WRONLY CREAT TRUNC"]
		puts $fh "timeout 0"
		puts $fh "default 0"
		puts $fh "\ntitle Genode on L4/Fiasco"
		puts $fh " kernel /boot/bender"
		puts $fh " module /bootstrap -serial"
		puts $fh " module /kernel -serial -jdb_cmd=JH [fiasco_serial_esc_arg]"
		puts $fh " module /sigma0"
		puts $fh " module /image.elf"
		puts $fh " vbeset 0x117 506070"
		close $fh
	}

	run_image

	if {[have_include "load/tftp"]} {
		#
		# Install PXE bootloader pulsar
		#
		install_pxe_bootloader_to_run_dir

		#
		# Generate pulsar config file
		#
		set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
		puts $fh " exec /boot/bender"
		puts $fh " load /bootstrap -serial"
		puts $fh " load /kernel -serial -serial_esc -jdb_cmd=JH"
		puts $fh " load /sigma0"
		puts $fh " load /image.elf"
		close $fh

		generate_tftp_config
	}

	if {[have_include "load/ipxe"]} {
		create_ipxe_iso_config
		update_ipxe_boot_dir
		create_symlink_for_iso
	}
}


##
# Base source archive within depot
#
proc base_src { } { return base-fiasco }

